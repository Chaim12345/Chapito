openapi: 3.0.3
info:
  title: Chapito OpenAI-Compatible API
  description: A proxy API that provides OpenAI-compatible endpoints for various AI chatbots
  version: 1.0.0
  contact:
    name: Chapito
servers:
  - url: http://localhost:8000
    description: Local development server
  - url: http://0.0.0.0:8000
    description: Production server

paths:
  /:
    get:
      summary: Root endpoint
      description: Get API information and available endpoints
      operationId: getRoot
      tags:
        - Root
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  version:
                    type: string
                  description:
                    type: string
                  endpoints:
                    type: object
                  compatibility:
                    type: string

  /v1:
    get:
      summary: V1 endpoint
      description: Get API information for v1 endpoints
      operationId: getV1Root
      tags:
        - Root
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  version:
                    type: string
                  description:
                    type: string
                  endpoints:
                    type: object
                  compatibility:
                    type: string

  /models:
    get:
      summary: List available models
      description: Returns a list of available models
      operationId: listModels
      tags:
        - Models
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/models:
    get:
      summary: List available models (v1)
      description: Returns a list of available models using v1 endpoint
      operationId: listModelsV1
      tags:
        - Models
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/completions:
    post:
      summary: Create a chat completion
      description: Creates a completion for the chat message
      operationId: createChatCompletion
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStreamResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/chat/completions:
    post:
      summary: Create a chat completion (v1)
      description: Creates a completion for the chat message using v1 endpoint
      operationId: createChatCompletionV1
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStreamResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      summary: Health check
      description: Check the health status of the service
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "chapito-proxy"

  /v1/health:
    get:
      summary: Health check (v1)
      description: Check the health status of the service using v1 endpoint
      operationId: healthCheckV1
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "chapito-proxy"

  /openapi.json:
    get:
      summary: OpenAPI specification
      description: Get the OpenAPI specification in JSON format
      operationId: getOpenAPI
      tags:
        - API
      responses:
        '200':
          description: OpenAPI specification
          content:
            application/json:
              schema:
                type: object

  /docs:
    get:
      summary: API documentation
      description: Swagger UI documentation
      operationId: getDocs
      tags:
        - API
      responses:
        '200':
          description: HTML documentation

  /redoc:
    get:
      summary: API documentation (ReDoc)
      description: ReDoc documentation
      operationId: getRedoc
      tags:
        - API
      responses:
        '200':
          description: HTML documentation

components:
  schemas:
    Message:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant]
          description: The role of the author of this message
        content:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum: [text]
                  text:
                    type: string
          description: The contents of the message

    ChatCompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: ID of the model to use
          example: "chapito"
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: A list of messages comprising the conversation
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          description: What sampling temperature to use
        max_tokens:
          type: integer
          minimum: 1
          description: The maximum number of tokens to generate
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          description: An alternative to sampling with temperature
        frequency_penalty:
          type: number
          minimum: -2.0
          maximum: 2.0
          default: 0
          description: Number between -2.0 and 2.0
        presence_penalty:
          type: number
          minimum: -2.0
          maximum: 2.0
          default: 0
          description: Number between -2.0 and 2.0
        stream:
          type: boolean
          default: false
          description: If set, partial message deltas will be sent
        n:
          type: integer
          minimum: 1
          maximum: 128
          default: 1
          description: How many chat completion choices to generate
        stop:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Up to 4 sequences where the API will stop generating
        user:
          type: string
          description: A unique identifier representing your end-user

    ChatCompletionResponse:
      type: object
      required:
        - id
        - object
        - created
        - model
        - choices
        - usage
      properties:
        id:
          type: string
          description: A unique identifier for the completion
          example: "chatcmpl-1234567890"
        object:
          type: string
          enum: [chat.completion]
          example: "chat.completion"
        created:
          type: integer
          description: The Unix timestamp of when the completion was created
          example: 1677652288
        model:
          type: string
          description: The model used for the completion
          example: "chapito"
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionChoice'
          description: A list of completion choices
        usage:
          $ref: '#/components/schemas/Usage'

    ChatCompletionStreamResponse:
      type: object
      description: Streaming response format
      properties:
        data:
          type: string
          description: Server-sent events data

    ChatCompletionChoice:
      type: object
      required:
        - index
        - message
        - finish_reason
      properties:
        index:
          type: integer
          description: The index of the choice
          example: 0
        message:
          $ref: '#/components/schemas/Message'
        finish_reason:
          type: string
          enum: [stop, length, content_filter]
          description: The reason the model stopped generating tokens
          example: "stop"

    Usage:
      type: object
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt
          example: 10
        completion_tokens:
          type: integer
          description: Number of tokens in the generated completion
          example: 20
        total_tokens:
          type: integer
          description: Total number of tokens used
          example: 30

    ModelsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          example: "list"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
          description: List of models

    Model:
      type: object
      required:
        - id
        - object
        - created
        - owned_by
      properties:
        id:
          type: string
          description: The model identifier
          example: "chapito"
        object:
          type: string
          enum: [model]
          example: "model"
        created:
          type: integer
          description: The Unix timestamp of when the model was created
          example: 1677652288
        owned_by:
          type: string
          description: The organization that owns the model
          example: "chapito"
        permission:
          type: array
          items:
            type: object
          description: List of permissions
        root:
          type: string
          description: The root model
          example: "chapito"
        parent:
          type: string
          nullable: true
          description: The parent model

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - type
          properties:
            message:
              type: string
              description: A human-readable error message
              example: "The requested resource was not found"
            type:
              type: string
              enum: [invalid_request_error, authentication_error, permission_error, not_found, server_error]
              description: The type of error
              example: "not_found"
            param:
              type: string
              nullable: true
              description: The parameter that caused the error
            code:
              type: string
              description: The error code
              example: "not_found"

tags:
  - name: Root
    description: Root endpoints providing API information
  - name: Models
    description: Operations related to models
  - name: Chat
    description: Operations related to chat completions
  - name: Health
    description: Health check operations
  - name: API
    description: API documentation and specification